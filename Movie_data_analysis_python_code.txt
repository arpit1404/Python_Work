# importing packages
from pandas import DataFrame, read_csv
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
import pandas as pd 
file = r'F:\Arpit\Arpit_Stuff1\Full_Time_Prep\incedo\Data Science Case Study\Data Science Case Study\movie_metadata.xls'
# reading the excel file
df = pd.read_excel(file)
# showing top elements
df.head(5)
# to check null values
df.isnull().sum()
#  to find the number of rows and columns
df.shape
#To replace values
df.replace('',-99999,inplace=True)
# To find the null values 
df.isnull().sum()
# To fill null values with mean value for budget
df["budget"].fillna("39752620.44", inplace = True)
# Define correlation matrix
correlation_matrix = df.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)
correlation_matrix.style.background_gradient(cmap='coolwarm')
# Plotting target values with dependent features
plt.figure(figsize=(20, 5))

features = ['num_user_for_reviews', 'num_voted_users']
target = df['gross']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = df[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('gross')
# Linear Regression modeling defining values for X and Y
X = pd.DataFrame(np.c_[df['num_user_for_reviews'], df['num_voted_users']], columns = ['num_user_for_reviews','num_voted_users'])
Y = df['gross']
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

# Performing minmax normalization technique and defining variables within range of 0 to 100. 
minmax=preprocessing.MinMaxScaler(feature_range=(0,100))
from sklearn import preprocessing
minmax=preprocessing.MinMaxScaler(feature_range=(0,100))
minmax.fit([df['gross']]).transform([df['gross']])

# Linear Regression model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)